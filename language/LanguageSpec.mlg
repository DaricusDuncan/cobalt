package asm

import dir.subDir.ClassName
import dir.subDir.{ClassName1, ClassName2}

/**
 * CobaltDoc comment: <code>Some code</code>
 *
 * @param x int param
 * @author Michael2109
 */
class ExampleClass(x: int) extends ParentClass:
    val field = "Some\nStrin\g"

    foo(x: float, y: float) <-float:
        def empty = 2
        val local = 1000 - empty
        Math.sqrt(x + y + local); //this can crash

  def t[T]: T = null
  foo(0, -1) match {
    case x => x
  }
  type G = Int
  val xml = <element attibute="value">data</element>
}

/*
  And now ScalaObject
 */
object Object {
  val layer = -5.0
  val mutableCollection = HashMap[Int,  Int]()
  val immutableCollection = List(1, 2)
  val javaCollection = new TreeMap[Int,  Int]()

  def foo: ScalaClass = new ScalaClass(23, 9)
}

@Annotation(2) {val name = value}
trait Trait {
}

abstract class SomeAbstract {
  for (x <- list) {x}
}

